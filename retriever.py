# -*- coding: utf-8 -*-
"""Retriever.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bbQpCPwn8pfEQnMpOnt9hmxIXM4CXFtQ
"""

import os,getpass

from google.colab import userdata

GROQ_API_KEY = userdata.get('GROQ_API_KEY')
os.environ["GROQ_API_KEY"] = GROQ_API_KEY
print("API Key loaded successfully")

#pip install langchain-groq

#pip install langchain-community

from langchain_core.prompts import PromptTemplate
from langchain_groq import ChatGroq



## initialize the model
llm=ChatGroq(
    model="llama3-8b-8192",
    temperature=0.3,
    max_tokens=None,
    timeout=None,
    max_retries=2,
)

"""## Vector Store"""

#pip install chromadb

from langchain.vectorstores import Chroma
from langchain.embeddings import HuggingFaceEmbeddings

from langchain_core.documents import Document

# Create 5 sample documents about "Variants of Trees"
docs = [
    Document(
        page_content="Oak trees are deciduous and renowned for their hardy nature, longevity, and strong wood. Common species include the English oak and the live oak.",
        metadata={"source": "tree_guide", "topic": "tree_variants", "tree_type": "oak"}
    ),
    Document(
        page_content="Pine trees are evergreen conifers known for their needle-like leaves and cone-bearing properties. They thrive in temperate and cold regions across the Northern Hemisphere.",
        metadata={"source": "forest_journal", "topic": "tree_variants", "tree_type": "pine"}
    ),
    Document(
        page_content="Maple trees are known for their distinctive lobed leaves and vibrant fall colors. They are commonly found in Asia and North America and are tapped for maple syrup production.",
        metadata={"source": "botanical_review", "topic": "tree_variants", "tree_type": "maple"}
    ),
    Document(
        page_content="Banyan trees are large, tropical fig trees that start life as epiphytes on other trees. They are sacred in many cultures and provide vast shade due to their wide canopy.",
        metadata={"source": "ancient_trees_blog", "topic": "tree_variants", "tree_type": "banyan"}
    ),
    Document(
        page_content="Baobab trees are native to Africa, Australia, and Madagascar. They are famous for their massive trunks, which store water, and their long lifespan of up to 3,000 years.",
        metadata={"source": "wildlife_magazine", "topic": "tree_variants", "tree_type": "baobab"}
    )
]

vector_store=Chroma.from_documents(
    embedding=HuggingFaceEmbeddings(),
    documents=docs,
    collection_name="Tree_collection",
    persist_directory="my_chroma_vector_store"
)

vector_store.get()

vector_store.get(include=['embeddings'])

"""### Add documents in vector store"""

doc_2=Document(
    page_content="Willow trees are known for their slender, drooping branches and graceful appearance. They grow best near water and are commonly found in temperate regions across the Northern Hemisphere.",
    metadata={"source": "botanical_gardens", "topic": "tree_variants", "tree_type": "willow"}
)

doc_3=Document(
    page_content="Cedar trees are tall evergreens with aromatic wood and needle-like leaves. They are native to mountainous regions of the Mediterranean and Himalayas and are valued for their durable timber and cultural significance.",
    metadata={"source": "forestry_reports", "topic": "tree_variants", "tree_type": "cedar"}
)

merge_doc=[doc_2,doc_3]

vector_store.add_documents(merge_doc)

vector_store.get()

"""### Search the docment basis query"""

vector_store.similarity_search_with_score(query="Which tree is native to Africa",k=2)

vector_store.similarity_search_with_score(query="",filter={"tree_type":"oak"})

"""## Retriever"""

pip install faiss-cpu

"""### Wikipedia retriever"""

pip install wikipedia

from langchain_community.retrievers import WikipediaRetriever

## Initialize the Retriever and search K results

retriever= WikipediaRetriever(top_k=2,lang='en')

docs=retriever.invoke("How does The America Sees India and pakistan recent conflict on Pahalgam")

print(len(docs))

for i,doc in enumerate(docs):
  print(f'result_{i+1}')
  print(doc.page_content)
  print('-'*100)

embedding=HuggingFaceEmbeddings(model_name="sentence-transformers/all-mpnet-base-v2")

"""## Retriever"""

from langchain.vectorstores import FAISS

doc1=Document(
    page_content="The African Grey Parrot is native to Central and West Africa. It feeds mainly on seeds, nuts, fruits, and leafy matter. Known for its intelligence and mimicry skills, it shares its habitat with birds like the Senegal Parrot and Red-fronted Macaw.",
    metadata={"source": "bird_species_wikipedia", "topic": "bird_variants", "region": "Africa", "diet": "fruits, seeds, nuts"}
)
doc2=Document(
    page_content="The Ostrich is the largest living bird and is native to Africa. It primarily eats plant matter such as seeds, leaves, and flowers, but also consumes insects occasionally. Other large flightless birds found in Africa include the Kori Bustard and Secretary Bird.",
    metadata={"source": "national_geographic_birds", "topic": "bird_variants", "region": "Africa", "diet": "plants, insects"}
)
doc3=Document(
    page_content="The Scarlet Macaw is found in humid evergreen forests in Mexico, Central America, and South America. Its diet consists of seeds, nuts, fruits, and flowers. Similar birds in this region include the Blue-and-yellow Macaw and the Toucan, which share the same tropical habitat.",
    metadata={"source": "neotropical_bird_guide", "topic": "bird_variants", "region": "South America", "diet": "fruits, seeds"}
)
doc4=Document(
    page_content="The Emperor Penguin is native to Antarctica and is known for its ability to survive extreme cold. Its diet consists almost entirely of fish and krill. The only other penguin species that overlaps slightly in range is the Ad√©lie Penguin, though their diets differ somewhat.",
    metadata={"source": "antarctic_wildlife", "topic": "bird_variants", "region": "Antarctica", "diet": "fish, krill"}
)
doc5=Document(
    page_content="The Bald Eagle is found throughout North America near large bodies of open water. It feeds mainly on fish, but will also eat small mammals and carrion. Birds with similar predatory habits in North America include the Golden Eagle and Osprey.",
    metadata={"source": "north_american_birds", "topic": "bird_variants", "region": "North America", "diet": "fish, carrion"}
)
docs=[doc1,doc2,doc3,doc4,doc5]

vector_faiss=FAISS.from_documents(
    documents=docs,
    embedding=embedding
)

retriever_faiss=vector_faiss.as_retriever(search_type="similarity",search_kwargs={"k":2})

res=retriever_faiss.invoke("What is the  bird that eats fish and belonging to Antartica")

for doc in res:
  print(doc.page_content)
  print('-'*100)

"""## Maximum Marginal Query"""

retriever_mmr=vector_faiss.as_retriever(search_type="mmr",search_kwargs={"k":2,"lambda_mult": 1})

res=retriever_mmr.invoke("What is the  bird that eats fish and native to Antartica")

for doc in res:
  print(doc.page_content)
  print('-'*100)

# Sample documents
docs = [
    Document(page_content="LangChain makes it easy to work with LLMs."),
    Document(page_content="LangChain is used to build LLM based applications."),
    Document(page_content="Chroma is used to store and search document embeddings."),
    Document(page_content="LangChain is a framework for developing applications powered by large language models (LLMs)."),
    Document(page_content="Embeddings are vector representations of text."),
    Document(page_content="MMR helps you get diverse results when doing similarity search."),
    Document(page_content="LangChain supports Chroma, FAISS, Pinecone, and more."),
]

faiss_vector=FAISS.from_documents(
    embedding=embedding,
    documents=docs

)

retriever=faiss_vector.as_retriever(search_type="similarity",search_kwargs={"k":3})

query='What is Langchain'

res=retriever.invoke(query)

for result in res:
  print(result.page_content)
  print('-'*100)

retriever=faiss_vector.as_retriever(search_type="mmr",search_kwargs={"k":3,'lambda_mult':0.2})

res=retriever.invoke(query)

for result in res:
  print(result.page_content)
  print('-'*100)

"""## Multiple Query Retriever"""

from langchain.retrievers.multi_query import MultiQueryRetriever

# Relevant health & wellness documents
all_docs = [
    Document(page_content="Regular walking boosts heart health and can reduce symptoms of depression.", metadata={"source": "H1"}),
    Document(page_content="Consuming leafy greens and fruits helps detox the body and improve longevity.", metadata={"source": "H2"}),
    Document(page_content="Deep sleep is crucial for cellular repair and emotional regulation.", metadata={"source": "H3"}),
    Document(page_content="Mindfulness and controlled breathing lower cortisol and improve mental clarity.", metadata={"source": "H4"}),
    Document(page_content="Drinking sufficient water throughout the day helps maintain metabolism and energy.", metadata={"source": "H5"}),
    Document(page_content="The solar energy system in modern homes helps balance electricity demand.", metadata={"source": "I1"}),
    Document(page_content="Python balances readability with power, making it a popular system design language.", metadata={"source": "I2"}),
    Document(page_content="Photosynthesis enables plants to produce energy by converting sunlight.", metadata={"source": "I3"}),
    Document(page_content="The 2022 FIFA World Cup was held in Qatar and drew global energy and excitement.", metadata={"source": "I4"}),
    Document(page_content="Black holes bend spacetime and store immense gravitational energy.", metadata={"source": "I5"}),
]

vector_faiss=FAISS.from_documents(
    embedding=embedding,
    documents=all_docs

)

similarity_retriever=vector_faiss.as_retriever(search_type="similarity",search_kwargs={"k":5})

multiquery_retriever=MultiQueryRetriever.from_llm(
    retriever=vector_faiss.as_retriever(search_kwargs={"k":2}),
    llm=llm
)

query="How to improve energy levels and maintain balance?"

result=similarity_retriever.invoke(query)

print(result)

for text in result:
  print(text.page_content)
  print('-'*100)

result=multiquery_retriever.invoke(query)

for text in result:
  print(text.page_content)
  print('-'*100)

"""## Contextual Compressor Retriever"""

from langchain.retrievers import ContextualCompressionRetriever
from langchain.retrievers.document_compressors import LLMChainExtractor
from langchain_core.documents import Document
from langchain_community.vectorstores import FAISS
from langchain.embeddings import HuggingFaceEmbeddings

# Recreate the document objects from the previous data
docs = [
    Document(page_content=(
        """The Grand Canyon is one of the most visited natural wonders in the world.
        Photosynthesis is the process by which green plants convert sunlight into energy.
        Millions of tourists travel to see it every year. The rocks date back millions of years."""
    ), metadata={"source": "Doc1"}),

    Document(page_content=(
        """In medieval Europe, castles were built primarily for defense.
        The chlorophyll in plant cells captures sunlight during photosynthesis.
        Knights wore armor made of metal. Siege weapons were often used to breach castle walls."""
    ), metadata={"source": "Doc2"}),

    Document(page_content=(
        """Basketball was invented by Dr. James Naismith in the late 19th century.
        It was originally played with a soccer ball and peach baskets. NBA is now a global league."""
    ), metadata={"source": "Doc3"}),

    Document(page_content=(
        """The history of cinema began in the late 1800s. Silent films were the earliest form.
        Thomas Edison was among the pioneers. Photosynthesis does not occur in animal cells.
        Modern filmmaking involves complex CGI and sound design."""
    ), metadata={"source": "Doc4"})
]

embedding=HuggingFaceEmbeddings(model_name="sentence-transformers/all-mpnet-base-v2")

Fais_vector=FAISS.from_documents(
    embedding=embedding,
    documents=docs
)

base_retriever=Fais_vector.as_retriever(search_kwargs={"k":5})

# Set the compressor using LLM
compressor=LLMChainExtractor.from_llm(llm)

# Create the contextual compression retriever
  compression_retriever = ContextualCompressionRetriever(
      base_compressor=compressor,
      base_retriever=base_retriever
  )

query="What is photynthesis"

results=compression_retriever.invoke(query)

for text in results:
  print(text.page_content)
  print('-'*100)

