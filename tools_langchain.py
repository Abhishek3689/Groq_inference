# -*- coding: utf-8 -*-
"""Tools_langchain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cOG9dSaKO6x7Xf80rjPT_G8EMuGan3mE
"""

!pip install langchain langchain-core langchain-community pydantic duckduckgo-search langchain_experimental

"""## Build in tool Duck Duck Go Search"""

from langchain_community.tools import DuckDuckGoSearchRun,DuckDuckGoSearchResults

search=DuckDuckGoSearchResults()

search_tool=DuckDuckGoSearchRun()

results=search_tool.invoke("What is the most latest news in India today .Give short decription")

print(results)

"""## Built in Shell Tool"""

from langchain_community.tools import ShellTool
shell_tool=ShellTool()
results=shell_tool.invoke("ls")
print(results)

"""## Custom /tools"""

from langchain_core.tools import tool
from pydantic import BaseModel, Field
from typing import Optional,List

def give_most_frequent(arr:List)->str:
  d1={}
  for val in arr:
    d1[val]=d1.get(val,0)+1
  return max(d1,key=d1.get)

@tool
def give_most_frequent(arr:List[str])->str:
  """
  Return the most frequent element in the list
  """
  d1={}
  for val in arr:
    d1[val]=d1.get(val,0)+1
  return max(d1,key=d1.get)

result=give_most_frequent.invoke({'arr':['a','c','d','1','1']})

result

print(give_most_frequent.name)
print(give_most_frequent.description)
print(give_most_frequent.args)

"""## Structured Tool"""

from langchain.tools import StructuredTool

class Multiply_numbers(BaseModel):
  a:int=Field(description="first number")
  b:int=Field(description="second number")

def multiply_num(a:int,b:int)->int:
  return a*b

multiply_tool=StructuredTool.from_function(
    func=multiply_num,
    name="Multiply_numbers",
    description="Multiply two numbers",
    args_schema=Multiply_numbers
)

result=multiply_tool.invoke({"a":'5',"b":3})
result

print(result)
print(multiply_tool.name)
print(multiply_tool.description)
print(multiply_tool.args)

